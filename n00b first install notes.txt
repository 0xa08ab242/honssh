spun up an old vm
	Virtual Guest	64-bit Ubuntu 14 LTS
	VM Hypervisor	VMware Workstation v11
	Virtual Host	Windows 7 (64-bit) host

patched vm guest before doing anything else
	apt-get update
	apt-get upgrade
	apt-get dist-upgrade

install (or verify as installed) HonSSH's listed requirements
	apt-get install python2.7
	apt-get install python-twisted
	apt-get install python-mysqldb
	apt-get install python-geoip
	apt-get install ssh		[yes, I really had to install that]

looking for correct/best/recommended procedure for installing HonSSH (https://github.com/tnich/honssh/wiki)
	nothing obvious listed
	not in the available ubuntu packages
	therefore need to download source to some arbitrary location...
		source is on github
		apt-get install git
	advanced networking requires root permissions
	therefore, lacking guidance to the contrary installing as root
		downloading to /tmp
		cd /tmp/
		git clone https://github.com/tnich/honssh.git
			(for fun I will try pulling from my fork in a subsequent test)
			git clone https://github.com/0xa08ab242/honssh.git
so now I have the code... what do I need to do to make it work (in a preliminary test scenario)
	I have 3 other VM guests in the same VLAN
		1 is a virtual firewall/router/gateway for access to the Internet
		1 is a Windows 7 guest with putty for initiating the ssh sessions
		1 is a Kali linux guest with sshd enabled to serve as the ssh target
for Test 1:
	all VMs on the same subnet
	copied off logs for both /honssh/logs and /honssh/sessions for easier study

for Test 2:
	I moved the target linux guest to another VLAN (vmnet2)
	Used firewall/load balancer (vfw2) on the same net as the Ubuntu (HonSSH)
	confirmed connectivity from VLAN1 - local to HonSSH (still using port 2222) through vfw2 to target (on port 22)
	used except for logs to update /honssh/logs/readme.md
	
for Test 3:
	I need to change the rules for vfw1 to allow ssh from external and direct it to HonSSH (map external port 22 to 2222 on HonSSH)
	this will preserve normal ssh on HonSSH server, for now
	continue using load balancing function of vfw2 to keep HonSSH on a different network
	I need to fix the rules for vfw2 to fix the network traffic that I broke in Test 2
	this should approximate a one-way protection scenario that could (in theory) scale to useful levels

for Test 4:	
	Setup HonSSH effectively for both forward and reverse proxy scenario
	plan how to scale it

HonSSH configuration steps
	[referring to HonSSH wiki for the next few steps]
<snip>
	Config	
	Edit honssh.cfg to your liking and start by running:

	./honsshctrl.sh START
</snip>

	So, according to this, I merely need to figure out what I like...
	...before I can decide what I like, first I need to find at least 2 ways to make it work...

Keeping a log of my fumbling through it:
	navigate into download directory (local repository) - 
		cd /tmp/honssh/
	looking at my configuration options and what I have running at the moment (Test 1 scenario above)
	review the configuration files (honssh.cfg.default and users.cfg.default)

	cp honssh.cfg.default honssh.cfg
	vi honssh.cfg
required fields only
	add a sensor name
		arbitrary name (i.e. 'honeybadger' to identify the Kali SSH target)

	IP addresses to listen for incoming SSH connections
		Ubunutu ETH0 IP (ETH0 is 192.168.101.131)

	Port number to listen for incoming SSH connections
		default option is 2222 (works for test 1, we will change this for subsequent tests)

	IP addresses to send outgoing SSH connections
		Ubuntu ETH0 IP (ETH1 is 192.168.101.131)
		[if send/receive on same port fails, then proceed to test scenario 2]

	IP addresses of the honeypot
		Kali ETH0 IP (ETH0 is 192.168.101.75)

	Port number of the honeypot (honeypot = Kali VM in my scenario)
		default is 22 (would typically use 22)	

	Optional settings - accepting defaults
		items to note
			X11 forwarding is disabled
			Port forwarding (SSH tunnel) is disabled
			log directory is "logs"
			session directory is "sessions"

		Advanced Networking
		set to false by default (will change this to true in future tests)

		Live Interactions is disabled by default (may want to test this later)

		Password spoofing is disabled by default (may want to test this later)

		Logging to Text is enabled
		Option logging
			to MySQL database is disabled (might look to change this to a mariadb, postgresqldb, or something else...long term goal)	
			to SMTP is disabled
			to HP Feeds is disabled
		
		File download of SCP and SFTP is disabled by default (will change this is later tests)
		Remote download/upload of SCP SFTP is disabled by default (e.g. save to cloud)

		API hooks are all optional and disabled

Test 1 - Iteration 1
	after making the above described changes to the configuration file	(honssh.cfg)
	start the honssh process	/tmp/honssh/honsshctrl.sh START
		left public and private key generation passphrases empty (just hit ENTER)
	check that it appears to be running as expected
		ps -ef | grep ssh		shows normal ssh running and shows twistd -y honssh.tac running
		netstat -na | grep 22		shows 22 listening on all interfaces; shows 2222 listening on eth0 IP
	switch to the 'outside' vm guest
	generate an SSH connection to honssh eth0 on port 2222

Test 1 - success...connection through to 'inside guest'
	now a few commands to create some logs to review
	bottom line is that it worked
	the .txt logs were trivial to review, but the did not contain the juicy data
	the .tty logs need something else to review (kippo reader ttylog.py)
		what can I use to sift through that log... grab the prompt, grab commands, etc...
		is the time line included in the .tty log
		need to crack it open...

n00b mistake 1 - after fixing all those things and running it once, I forgot to check the VM guest setting
	took a break, shut everything down and restarted
	all honssh related files were deleted (/tmp remember)... need to fix that for the next time
	luckily I documented the details of my choices, so recreating this won't be too bad

	so, what would be a better recommended installation location
	/var... why /var ?  because it defaults to writing logs to the local directory (e.g. /honssh/logs/. and /honssh/sessions/.)
		later I will try changing the file path to be explicit rather than relative to see how well that works

	I also want to extract the .tty files to find a better way to analyze then than manual playback
		I also need a better target system (login as user, execute sudo and/or su)

Test 1 - Iteration 2
	exactly the same as Iteration 1, except I pulled the source from my fork of the project
	note, first run of honsshcrtl.sh START generated keys, but a check of ps -ef | grep ssh
		the process was not running
	after the second run of honsshctrl.sh START the process was visible from ps -ef | grep ssh
	also, upon connecting to the same server again - due to key generation, putty bitched about the new certificate
		need to follow up on that one for scaling this...
	
	getting the logs off...
	scp'd the logs to host that I had setup to be able to copy them to the VM host (this took a few steps)

Test 1 - post mortem
	examine the contents of both /honssh/logs and /honssh/sessions
	add output logs to my fork of the honssh repository and add readme files to those folders

Test 2 - moving the target SSH server at least one network hop away from the HonSSH proxy
	cloned the existing virtual firewall vfw1, since it has a load balancing function
	changed network interfaces of clone (vfw2)
		WAN for vfw2 is LAN for vfw1 (vmnet1)
		LAN for vfrw2 is now vmnet2
	updated IP addresses to match the updated network connections
		configured load balancer
			added virtual IP address --> this IP address was used as the target in honssh.cfg
			added one IP into the pool --> this IP was assigned to the target SSH server
	moved target SSH server (changed the virtual nic to use vmnic2 instead of vmnic1)
		updated network configuration (since I usually run Kali with a static IP)
	connected to honssh server from vm host via putty to confirm basic network connectivity
	updated honssh.cfg
	started via honsshctrl.sh
	reran honsshctrl.sh after ps -ef | grep ssh did not show honssh running after the first run (I think it only generates the keys)
	
	successfully connected to honssh on port 2222, and transparently redirected to kali on port 22
		entered invalid credentials before entering the correct ones, just to see how it shows up in the logs
		ran a few commands, observed that I broke some of the network connectivity on the kali guest
		ended the proxied connection
	
	connected to Kali via a putty session directly, ran a db_nmap -A scan against the honssh (Ubuntu 14 TLS) server to see how it fingerprints
		here are the relevant results
			port 22		(Ubuntu native SSH)		db_nmap info		protocol 2.0
			port 2222	(Honssh SSH)				db_nmap info		OpenSSH 6.0p1 Debian 4+deb7u2 protocol 2.0
	